{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "200901023_Hussain Zaheer",
      "provenance": [],
      "authorship_tag": "ABX9TyMYemLnAylcUzMZB9iZuuOj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hussainzaheer/200901023_Lab_Submission/blob/main/200901023_Hussain_Zaheer(25-OCT-21)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9C9EdyJRwyjW"
      },
      "source": [
        "import numpy as np\n",
        "class queue:\n",
        "    \n",
        "    def __init__ (self , s):\n",
        "        \n",
        "        self.s = s\n",
        "        self.elements = np.empty([self.s])\n",
        "        self.front=0\n",
        "        self.rear = 0\n",
        "        self.size = s\n",
        "    def queue_Enqueue(self,data):\n",
        "        \n",
        "        if (self.size == self.rear):\n",
        "            \n",
        "            return \"Queue is full (Overflow)\"\n",
        "        else:\n",
        "            self.elements[self.rear] = data\n",
        "            self.rear = self.rear +1\n",
        "\n",
        "    def queue_dequeue(self):\n",
        "        if (self.front == self.rear):\n",
        "            return \"Queue is Empty (Underflow)\" \n",
        "        else:\n",
        "            self.front = self.front + 1\n",
        "  \n",
        "    def queue_display(self):\n",
        "        if(self.front == self.rear):\n",
        "            return \"Queue is empty underflow \"\n",
        "        for x in self.elements:\n",
        "            print(x)\n",
        "\n",
        "    def queue_Front(self):\n",
        "        if(self.front == self.rear):\n",
        "            print(\"Queue is Empty underflow\")\n",
        "        print(\"Front Element is:\",\n",
        "          self.queue[self.front])"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "auvvp42Jwz0H"
      },
      "source": [
        "q = queue(4)"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "7K_wknr7w16_",
        "outputId": "caff84c9-ac61-46c9-f80d-3a6db40461fb"
      },
      "source": [
        "q.queue_dequeue()"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Queue is Empty (Underflow)'"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "pzCNqrOLw3SF",
        "outputId": "07765875-e60a-4d97-e864-3b3154889b57"
      },
      "source": [
        "q.queue_Enqueue(10)\n",
        "q.queue_Enqueue(5)\n",
        "q.queue_Enqueue(50)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Queue is full (Overflow)'"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "651ZMMgIw40m",
        "outputId": "56e59567-897e-4c7b-cba5-d05d5d5fbb34"
      },
      "source": [
        "q.queue_Enqueue(10)\n",
        "q.queue_Enqueue(5)\n",
        "q.queue_Enqueue(50)\n",
        "q.queue_Enqueue(25)"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Queue is full (Overflow)'"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4GNFRGBBCjmo",
        "outputId": "a3b59b6e-6240-4ccd-adc5-397638a91a73"
      },
      "source": [
        "\n",
        "import collections \n",
        "  \n",
        "cd = collections.deque([1,2,3])\n",
        "  \n",
        "cd.append(4)\n",
        "  \n",
        "print (\"The deque after appending at right is : \")\n",
        "print (cd)\n",
        "  \n",
        "cd.appendleft(6)\n",
        "\n",
        "print (\"The deque after appending at left is : \")\n",
        "print (cd)\n",
        "  \n",
        "cd.pop()\n",
        "  \n",
        "print (\"The deque after deleting from right is : \")\n",
        "print (cd)\n",
        "  \n",
        "cd.popleft()\n",
        "  \n",
        "print (\"The deque after deleting from left is : \")\n",
        "print (cd)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The deque after appending at right is : \n",
            "deque([1, 2, 3, 4])\n",
            "The deque after appending at left is : \n",
            "deque([6, 1, 2, 3, 4])\n",
            "The deque after deleting from right is : \n",
            "deque([6, 1, 2, 3])\n",
            "The deque after deleting from left is : \n",
            "deque([1, 2, 3])\n"
          ]
        }
      ]
    }
  ]
}